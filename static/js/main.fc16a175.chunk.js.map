{"version":3,"sources":["context/gameMode.jsx","context/user.jsx","components/StartGameForm/index.jsx","containers/WelcomePage/index.jsx","components/GameWord/index.jsx","components/Game/index.jsx","containers/PlayPage/index.jsx","containers/FinishPage/index.jsx","containers/Layout/index.jsx","settings/games.js","App.js","index.js"],"names":["GameModeContext","React","createContext","gameMode","GameModeProvider","children","useState","setGameMode","score","updateScore","Provider","value","setMode","mode","setScore","useGameMode","useContext","UserContext","userName","UserProvider","setUserName","setUser","username","useUser","StartGameForm","onSubmit","type","placeholder","required","minLength","WelcomePage","e","preventDefault","target","replace","length","GameWord","selectWord","checkMode","isWordSelected","isGoodWord","word","className","onClick","bind","Game","title","allWords","goodWords","selectedWords","wordsWithClassnames","setClassnamesForWords","useEffect","wordsWithRandomClassNames","map","Math","floor","random","sort","item","includes","PlayPage","setSelectedWord","game","setGameData","setCheckMode","fetch","then","response","ok","Error","statusText","json","data","catch","console","log","Object","entries","question","all_words","filteredWords","filter","updatedWords","push","good_words","selectedCorrectAnswers","selectedWrongAnswers","forEach","answer","notSelectedCorrectAnswers","FinishPage","Layout","switchPages","games","Server","routes","this","namespace","get","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc16a175.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst GameModeContext = React.createContext({ gameMode: 'welcome' });\r\n\r\nexport const GameModeProvider = ({ children }) => {\r\n  const [gameMode, setGameMode] = React.useState('welcome');\r\n  const [score, updateScore] = React.useState(0);\r\n  const setMode = mode => {\r\n    setGameMode(mode);\r\n  }\r\n  const setScore = score => {\r\n    updateScore(score);\r\n  }\r\n  return (\r\n    <GameModeContext.Provider value={{ gameMode, setMode, setScore, score }}>\r\n      {children}\r\n    </GameModeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGameMode = () => {\r\n  const { gameMode, setMode, score, setScore } = React.useContext(GameModeContext);\r\n  return { gameMode, setMode, score, setScore };\r\n};\r\n","\r\nimport React from 'react';\r\n\r\nconst UserContext = React.createContext({ userName: '' });\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userName, setUserName ] = React.useState('');\r\n\tconst setUser = username => {\r\n\t\tsetUserName(username);\r\n\t}\r\n  return (\r\n    <UserContext.Provider value={{ userName, setUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => {\r\n\tconst { userName, setUser } = React.useContext(UserContext);\r\n  return { userName, setUser };\r\n};\r\n","import React from 'react'\r\n\r\nconst StartGameForm = ({ onSubmit }) => (\r\n\t\t<form onSubmit={onSubmit}>\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tplaceholder=\"Enter your nickname here...\"\r\n\t\t\trequired\r\n\t\t\tminLength=\"2\"\r\n\t\t/>\r\n\t\t\t<button type=\"submit\">Play</button>\r\n\t\t</form>\r\n\t)\r\n\r\nexport default StartGameForm;","import React from 'react'\r\nimport StartGameForm from '../../components/StartGameForm';\r\nimport { useGameMode } from '../../context/gameMode';\r\nimport { useUser } from '../../context/user';\r\n\r\nconst WelcomePage = () => {\r\n\tconst { setMode } = useGameMode();\r\n\tconst { setUser } = useUser();\r\n\r\n\tconst startGame = e => {\r\n\t\te.preventDefault();\r\n\t\tconst username = e.target[0].value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');;\r\n\t\tif (username.length >= 2) {\r\n\t\t\tsetUser(e.target[0].value);\r\n\t\t\tsetMode('play');\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Wordcloud Game</h1>\r\n\t\t\t<StartGameForm onSubmit={startGame} />\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default WelcomePage;","import React from 'react'\r\n\r\nconst GameWord = ({ selectWord, checkMode, isWordSelected, isGoodWord, word }) =>\r\n\t<div\r\n\t\tclassName={checkMode ? 'not_clickable' : ''}\r\n\t\tonClick={checkMode ? null : selectWord.bind(null, word)}\r\n\t>\r\n\t\t<span\r\n\t\t\tclassName={`\r\n\t\t\t${!checkMode && isWordSelected ? \"selected\" : ''}\r\n\t\t\t${checkMode && isWordSelected ? isGoodWord ? 'good' : 'wrong' : ''} \r\n\t\t\t`}\r\n\t\t>\r\n\t\t\t{word}\r\n\t\t\t{checkMode && isWordSelected ?\r\n\t\t\t\t<i\r\n\t\t\t\t\tclassName={isGoodWord ? 'good' : 'wrong'}\r\n\t\t\t\t>\r\n\t\t\t\t\t{isGoodWord ? 'Good!' : 'Wrong!'}\r\n\t\t\t\t</i>\r\n\t\t\t\t: null}\r\n\t\t</span>\r\n\t</div>\r\n;\r\nexport default GameWord;","import React from 'react'\r\nimport GameWord from '../GameWord';\r\n\r\nconst Game = ({ title, allWords, goodWords, selectWord, selectedWords, checkMode }) => {\r\n\tconst [wordsWithClassnames, setClassnamesForWords] = React.useState([]);\r\n\tReact.useEffect(() => {\r\n\t\tconst wordsWithRandomClassNames = allWords\r\n\t\t\t.map(word => ({\r\n\t\t\tword,\r\n\t\t\tclassName: `listItem_${Math.floor(Math.random() * 5) + 1}`\r\n\t\t}))\r\n\t\t\t.sort(() => Math.random() - 0.5);\r\n\t\tsetClassnamesForWords(wordsWithRandomClassNames);\r\n\t}, []);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{wordsWithClassnames.map(item =>\r\n\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\tkey={item.word}\r\n\t\t\t\t\t\t\tclassName={item.className}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<GameWord\r\n\t\t\t\t\t\t\t\t\tword={item.word}\r\n\t\t\t\t\t\t\t\t\tselectWord={selectWord}\r\n\t\t\t\t\t\t\t\t\tisGoodWord={goodWords.includes(item.word)}\r\n\t\t\t\t\t\t\t\t\tisWordSelected={selectedWords.includes(item.word)}\r\n\t\t\t\t\t\t\t\t\tcheckMode={checkMode}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Game;","import React, { useEffect, useState } from 'react'\r\nimport Game from '../../components/Game';\r\nimport { useGameMode } from '../../context/gameMode';\r\n\r\nconst PlayPage = () => {\r\n\tconst { setScore, setMode } = useGameMode();\r\n\tconst [selectedWords, setSelectedWord] = useState([]);\r\n\tconst [game, setGameData] = useState(null);\r\n\tconst [checkMode, setCheckMode] = useState(false);\r\n\tuseEffect(() => {\r\n\t\tfetch(\"/api/games/\")\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (!response.ok) throw Error(response.statusText);\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(data => setGameData(data))\r\n\t\t\t.catch(e => {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t});\r\n\t}, []);\r\n\tconst selectWord = word => {\r\n\t\tif (selectedWords.includes(word)) {\r\n\t\t\tconst filteredWords = selectedWords.filter(word => !selectedWords.includes(word));\r\n\t\t\tsetSelectedWord(filteredWords);\r\n\t\t} else {\r\n\t\t\tconst updatedWords = [...selectedWords];\r\n\t\t\tupdatedWords.push(word);\r\n\t\t\tsetSelectedWord(updatedWords);\r\n\t\t}\r\n\t}\r\n\tconst checkAnswers = () => {\r\n\t\tlet selectedCorrectAnswers = 0;\r\n\t\tlet selectedWrongAnswers = 0;\r\n\t\tselectedWords.forEach(answer => {\r\n\t\t\tif (game.good_words.includes(answer)) {\r\n\t\t\t\tselectedCorrectAnswers++;\r\n\t\t\t} else {\r\n\t\t\t\tselectedWrongAnswers++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst notSelectedCorrectAnswers = game.good_words.length - selectedCorrectAnswers;\r\n\t\tconst score = (selectedCorrectAnswers * 2) - (selectedWrongAnswers + notSelectedCorrectAnswers);\r\n\t\tsetScore(score);\r\n\t\tsetCheckMode(true);\r\n\t}\r\n\tconst finishGame = () => {\r\n\t\tsetMode('finish');\r\n\t\tsetCheckMode(false);\r\n\t}\r\n\treturn (\r\n\t\tgame && Object.entries(game).length ?\r\n\t\t\t<>\r\n\t\t\t\t<Game\r\n\t\t\t\t\ttitle={game.question}\r\n\t\t\t\t\tallWords={game.all_words}\r\n\t\t\t\t\t\r\n\t\t\t\t\tselectWord={selectWord}\r\n\t\t\t\t\tselectedWords={selectedWords}\r\n\t\t\t\t\tcheckMode={checkMode}\r\n\t\t\t\t\tgoodWords={game.good_words}\r\n\t\t\t\t/>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={checkMode ? finishGame : checkAnswers}\r\n\t\t\t\t>\r\n\t\t\t\t\t{checkMode ? 'Finish Game' : 'Check Answers'}\r\n\t\t\t\t</button>\r\n\t\t\t</>\r\n\t\t\t:\r\n\t\t\t<p>Loading...</p>\r\n\t)\r\n};\r\n\r\nexport default PlayPage;","import React from 'react'\r\nimport { useGameMode } from '../../context/gameMode';\r\nimport { useUser } from '../../context/user';\r\n\r\nconst FinishPage = () => {\r\n\tconst { score } = useGameMode();\r\n\tconst { userName } = useUser();\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>Congratulations, {userName}!</p>\r\n\t\t\t<p>Your score:</p>\r\n\t\t\t<p className=\"info\">{score} points</p>\r\n\t\t</>\r\n\t)\r\n};\r\n\r\nexport default FinishPage;","import React from 'react'\r\nimport { useGameMode } from '../../context/gameMode';\r\nimport WelcomePage from '../WelcomePage';\r\nimport PlayPage from '../PlayPage';\r\nimport FinishPage from '../FinishPage';\r\n\r\nconst Layout = () => {\r\n\tconst { gameMode } = useGameMode();\r\n\tconst switchPages = () => {\r\n\t\tswitch (gameMode) {\r\n\t\t\tcase 'welcome':\r\n\t\t\t\treturn <WelcomePage />;\r\n\t\t\tcase 'play':\r\n\t\t\t\treturn <PlayPage />;\r\n\t\t\tcase 'finish':\r\n\t\t\t\treturn <FinishPage />\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n      {switchPages()}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Layout;","const games = [\r\n  {\r\n    question: 'select animals',\r\n    all_words: [\r\n      'hole',\r\n      'sofa',\r\n      'pear',\r\n      'tiger',\r\n      'oatmeal',\r\n      'square',\r\n      'nut',\r\n      'cub',\r\n      'shirt',\r\n      'tub',\r\n      'passenger',\r\n      'cow'\r\n    ],\r\n    good_words: [\r\n      'tiger',\r\n      'cow'\r\n    ]\r\n  },\r\n  {\r\n    question: 'select colors',\r\n    all_words: [\r\n      'jeans',\r\n      'existence',\r\n      'ink',\r\n      'red',\r\n      'blue',\r\n      'yellow',\r\n      'laugh',\r\n      'behavior',\r\n      'expansion',\r\n      'white',\r\n      'black',\r\n      'cakes'\r\n    ],\r\n    good_words: [\r\n      'red',\r\n      'blue',\r\n      'yellow',\r\n      'white',\r\n      'black'\r\n    ]\r\n  },\r\n  {\r\n    question: 'select vehicles',\r\n    all_words: [\r\n      'belief',\r\n      'wire',\r\n      'car',\r\n      'bus',\r\n      'star',\r\n      'river',\r\n      'hat',\r\n      'skirt',\r\n      'train'\r\n    ],\r\n    good_words: [\r\n      'car',\r\n      'bus',\r\n      'train'\r\n    ]\r\n  }\r\n];\r\nexport default games;","import { GameModeProvider } from './context/gameMode';\r\nimport { UserProvider } from './context/user';\r\nimport Layout from './containers/Layout';\r\nimport { Server } from \"miragejs\";\r\nimport games from './settings/games';\r\n\r\nnew Server({\r\n  routes() {\r\n    this.namespace = \"api\";\r\n\t\tthis.get(\"/games/\", () => {\r\n\t\t\treturn games[Math.floor(Math.random() * 3)];\r\n    });\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GameModeProvider>\r\n        <UserProvider>\r\n          <Layout />\r\n        </UserProvider>\r\n      </GameModeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}